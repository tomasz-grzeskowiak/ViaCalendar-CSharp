@page "/event"
@using APIContracts.DTOs.Event
@using ViaCalendarApp.Services
@inject EventServiceClient EventService
@rendermode InteractiveServer

<h3>Events</h3>

<p>@statusMessage</p>

<button class="btn btn-primary mb-2" @onclick="LoadEvents">Load Events</button>

@if (events != null)
{
    <ul class="list-group mb-3">
        @foreach (var ev in events)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@ev.Name )</span>
                <span>
                    <button class="btn btn-sm btn-warning me-1" @onclick="() => StartEdit(ev)">Edit</button>
                </span>
            </li>
        }
    </ul>
}

<h4>@(editingEvent is null ? "Add Event" : "Edit Event")</h4>

<div class="mb-3">
    <label>Event ID:</label>
    <input class="form-control" @bind="formEventId" />
</div>
<div class="mb-3">
    <label>Event Name:</label>
    <input class="form-control" @bind="formEventName" />
</div>

<button class="btn btn-success me-1" @onclick="SaveEvent">Save</button>
<button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>

@code {
    private List<EventDto>? events;
    private string statusMessage = "Click 'Load Events' to fetch data.";

    private EventDto? editingEvent = null;
    private string formEventId = "";
    private string formEventName = "";

    private async Task LoadEvents()
    {
        try
        {
            events = await EventService.GetAllAsync();
            statusMessage = $"Loaded {events.Count} events.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading events: {ex.Message}";
        }
    }

    private void StartEdit(EventDto ev)
    {
        editingEvent = ev;
        formEventName = ev.Name;
    }

    private void CancelEdit()
    {
        editingEvent = null;
        formEventId = "";
        formEventName = "";
    }

    private async Task SaveEvent()
    {
        if (string.IsNullOrWhiteSpace(formEventId) || string.IsNullOrWhiteSpace(formEventName))
        {
            statusMessage = "Event ID and Event Name are required.";
            return;
        }

        try
        {
            var dto = new EventDto( formEventName);

            if (editingEvent == null)
            {
                await EventService.CreateAsync(new CreateEventDto(0,dto.Name));
                statusMessage = $"Event '{dto.Name}' created.";
            }

            await LoadEvents();
            CancelEdit();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error saving event: {ex.Message}";
        }
    }
}